@startuml

' Classes
abstract class Creature {
    protected:
    -std::string _name
    -int _health
    -std::string _description
    -std::vector<Item*> _inventory
    -bool _alive
    -Room* _currentRoom

    public:
    +Creature(const std::string& name, int health)
    +Creature(const std::string& name, int health, const std::string& desc)
    +~Creature()

    +virtual std::string getType() const = 0
    +void addItem(Item* item)
    +void removeItem(Item* item)

    +Room* getCurrentRoom()
    +void setCurrentRoom(Room* room)

    +std::string getName()
    +std::string getDescription()
    +std::string useItem(Item* item)
    +int getHealth()
    +void hurt(int damage)
    +bool isAlive()

    +std::vector<Item*> getInventory()
}

class Game {
    protected:
    -int _screen_height
    -int _screen_width
    -int _input_height
    -int _display_height

    -int _input_win_width
    -int _display_win_width

    -WINDOW* _title_win
    -WINDOW* _display_win
    -WINDOW* _input_win

    -Room* _currentRoom
    -bool _validInput

    -char buffer[256]
    -std::string _inputText

    -int _currentRow
    -Player* _player
    -std::vector<Room*> _rooms

    public:
    +Game()
    +~Game()

    +int setDefaults()
    +int loadTitle()
    +int loadRoom(Room* room)
    +int loadRoom(std::string roomName)
    +int lookRoom(Room* room)
    +int lookDirection(std::string dir)
    +int initPlayer()
    +int initWorldMap()
    +int welcomeMessage()
    +int getCommand()
    +int invalidCommand(std::string cmd, Room* room)
    +int start()
}

abstract class Item {
    protected:
    -std::string _name
    -std::string _description
    -std::optional<std::variant<Creature*, Room*>> _owner = std::nullopt

    public:
    +Item(const std::string& name)
    +Item(const std::string& name, const std::string& desc)
    +virtual std::string getType() const = 0
    +std::string getName() const
    +std::string getDescription() const
    +std::optional<std::variant<Creature*, Room*>> getOwner()
    +void setOwner(std::variant<Creature*, Room*> newOwner)
    +~Item()
}

class Player extends Creature {
    public:
    +Player(const std::string& name, int health)
    +Player(const std::string& name, int health, const std::string& desc)

    +std::string getType() const
    +std::string listInventory()
    +std::string attack()
    +std::string attack(Creature* creature)
    +std::string attack(Creature* creature, Item* item)

    +~Player()
}

class Room {
    protected:
    -Room* _north
    -Room* _east
    -Room* _south
    -Room* _west

    -bool _accessable
    -std::string _name
    -std::string _description
    -std::vector<Item*> _inventory
    -std::vector<Creature*> _creatures

    public:
    +Room(std::string name)
    +Room(std::string name, bool accessable, std::string desc)
    +Room(std::string name, std::string desc)

    +std::string getName()
    +std::string getDescription()
    +std::string listItems()
    +bool getAccessable()

    +void setNorth(Room* north)
    +void setEast(Room* east)
    +void setSouth(Room* south)
    +void setWest(Room* west)
    +void setAll(Room* north, Room* east, Room* south, Room* west)

    +Room* getNorth()
    +Room* getEast()
    +Room* getSouth()
    +Room* getWest()

    +void addItem(Item* item)
    +void removeItem(Item* item)

    +void addCreature(Creature* creature)
    +void removeCreature(Creature* creature)

    +~Room()
}

' Associations
Creature -> Item
Creature -> Room
Game -> Player
Game -> Room
Item -> Creature
Item -> Room
Player -> Creature
Player -> Item
Room -> Creature
Room -> Item
Room --> Room : setNorth(), setEast(), setSouth(), setWest()

@enduml
